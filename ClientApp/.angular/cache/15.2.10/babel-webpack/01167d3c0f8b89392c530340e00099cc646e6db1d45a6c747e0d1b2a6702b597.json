{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ProductComponent = class ProductComponent {\n  /*  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string, private currencyService: CurrencyService) {\r\n     http.get<Product[]>(baseUrl + 'products').subscribe(result => {\r\n       this.products = result;\r\n     }, error => console.error(error));\r\n   } */\n  constructor(productService) {\n    this.productService = productService;\n    this.products = [];\n    this.exchangeRates = [];\n    this.countries = [];\n    this.currencies = ['USD', 'EUR', 'AUD'];\n    this.selectedCurrency = 'USD';\n  }\n  ngOnInit() {\n    this.loadProducts();\n    this.loadExchangeRates();\n    this.loadCountries();\n  }\n  loadProducts() {\n    this.productService.getProducts().subscribe(products => this.products = products);\n  }\n  loadExchangeRates() {\n    this.productService.getExchangeRates().subscribe(exchangeRates => this.exchangeRates = exchangeRates);\n  }\n  loadCountries() {\n    this.productService.getCountries().subscribe(countries => this.countries = countries);\n  }\n  /*   onCurrencyChange(currency: string) {\r\n      this.selectedCurrency = currency;\r\n      this.currencyService.setCurrency(currency);\r\n    }\r\n  \r\n    convertPrice(price: number, targetCurrency: string): number {\r\n      // Implement logic for currency conversion here\r\n      // This is a placeholder and should be replaced with actual conversion logic\r\n      return price;\r\n    } */\n  getExchangeRateForCurrency(currency) {\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === currency);\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n  changeCurrency(product) {\n    console.log(product.id);\n    console.log(this.selectedCurrency);\n    const currentDate = new Date();\n    const exchangeRate = this.getExchangeRateForCurrency(this.selectedCurrency);\n    console.log('Final Exchange Rate:', exchangeRate);\n    // const priceInSelectedCurrency = product * exchangeRate;\n    // console.log('Price in Selected Currency:', priceInSelectedCurrency);\n    // return priceInSelectedCurrency;\n    this.productService.convertPrice(product.id, this.selectedCurrency, exchangeRate).subscribe(convertedProduct => {\n      // Update the product list with the converted product\n      const index = this.products.findIndex(p => p.id === convertedProduct.id);\n      if (index !== -1) {\n        console.log(convertedProduct.price);\n        console.log(convertedProduct.name);\n        this.products[index] = convertedProduct;\n      }\n    });\n  }\n  getExchangeRateForProduct(product) {\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === product.currency);\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n  onCountrySelection(product, selectedCountryCode) {\n    const selectedCountry = this.countries.find(country => country.countryCode === selectedCountryCode);\n    if (selectedCountry) {\n      const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === selectedCountry.currencyCode);\n      if (exchangeRate) {\n        const newPrice = product.price / this.getExchangeRateForProduct(product) * exchangeRate.rate;\n        // Update the product's price\n        product.price = newPrice;\n      }\n    }\n  }\n};\nProductComponent = __decorate([Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\n//implements OnInit \n], ProductComponent);\nexport { ProductComponent };","map":{"version":3,"mappings":"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","names":["Component","ProductComponent","constructor","productService","ngOnInit","loadProducts","loadExchangeRates","loadCountries","getProducts","subscribe","products","getExchangeRates","exchangeRates","getCountries","countries","getExchangeRateForCurrency","currency","exchangeRate","find","rate","currencyCode","changeCurrency","product","console","log","id","selectedCurrency","currentDate","Date","convertPrice","convertedProduct","index","findIndex","p","price","name","getExchangeRateForProduct","onCountrySelection","selectedCountryCode","selectedCountry","country","countryCode","newPrice","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\ASHISH\\AngularTJX\\AngularPOC\\ClientApp\\src\\app\\product\\product.component.ts"],"sourcesContent":["\nimport { Component, OnInit, Inject } from '@angular/core';\nimport { ProductService } from './product.service';\nimport { Product } from '../product.model';\nimport { CurrencyService } from '../currency.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ExchangeRate } from '../exchange.model';\nimport { Country } from '../country.model';\n\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\n//implements OnInit \nexport class ProductComponent implements OnInit{\n  products: Product[] = [];\n  exchangeRates: ExchangeRate[] = [];\n  countries: Country[] = [];\n  currencies: string[] = ['USD', 'EUR', 'AUD'];\n  selectedCurrency: string = 'USD';\n /*  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string, private currencyService: CurrencyService) {\n    http.get<Product[]>(baseUrl + 'products').subscribe(result => {\n      this.products = result;\n    }, error => console.error(error));\n  } */\n\n  constructor(private productService: ProductService) {}\n\n  ngOnInit() {\n    this.loadProducts();\n    this.loadExchangeRates();\n    this.loadCountries();\n  }\n\n  loadProducts() {\n    this.productService.getProducts().subscribe(products => (this.products = products));\n    \n  }\n\n  loadExchangeRates() {\n    this.productService.getExchangeRates().subscribe(exchangeRates => (this.exchangeRates = exchangeRates));\n  }\n\n  loadCountries() {\n    this.productService.getCountries().subscribe(countries => (this.countries = countries));\n  }\n\n/*   onCurrencyChange(currency: string) {\n    this.selectedCurrency = currency;\n    this.currencyService.setCurrency(currency);\n  }\n\n  convertPrice(price: number, targetCurrency: string): number {\n    // Implement logic for currency conversion here\n    // This is a placeholder and should be replaced with actual conversion logic\n    return price;\n  } */\n\n  getExchangeRateForCurrency(currency: string): number {\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === currency);\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n\n  changeCurrency(product: Product) {\n    console.log(product.id);\n\n    console.log(this.selectedCurrency);\n    const currentDate = new Date();\n\n   \n    const exchangeRate = this.getExchangeRateForCurrency(this.selectedCurrency) ;\n    console.log('Final Exchange Rate:', exchangeRate);\n    \n    // const priceInSelectedCurrency = product * exchangeRate;\n    // console.log('Price in Selected Currency:', priceInSelectedCurrency);\n  \n    // return priceInSelectedCurrency;\n\n    this.productService.convertPrice(product.id, this.selectedCurrency, exchangeRate).subscribe(convertedProduct => {\n      // Update the product list with the converted product\n      const index = this.products.findIndex(p => p.id === convertedProduct.id);\n      if (index !== -1) {\n        console.log(convertedProduct.price);\n        console.log(convertedProduct.name);\n        this.products[index] = convertedProduct;\n      }\n    });\n  }\n  getExchangeRateForProduct(product: Product): number {\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === product.currency);\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n  onCountrySelection(product: Product, selectedCountryCode: string): void {\n    const selectedCountry = this.countries.find(country => country.countryCode === selectedCountryCode);\n    if (selectedCountry) {\n      const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === selectedCountry.currencyCode);\n      if (exchangeRate) {\n        const newPrice = (product.price / this.getExchangeRateForProduct(product)) * exchangeRate.rate;\n        // Update the product's price\n        product.price = newPrice;\n      }\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}