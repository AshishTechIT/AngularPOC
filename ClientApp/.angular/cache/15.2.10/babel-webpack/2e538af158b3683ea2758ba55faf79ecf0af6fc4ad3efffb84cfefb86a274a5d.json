{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { ProductComponent } from './product.component';\nimport { ProductService } from './product.service';\nimport { of } from 'rxjs';\ndescribe('ProductComponent', () => {\n  let component;\n  let fixture;\n  let productServiceMock;\n  beforeEach(() => {\n    // Create a spy object for ProductService\n    productServiceMock = jasmine.createSpyObj('ProductService', ['getProducts', 'getExchangeRates', 'getCountries']);\n    TestBed.configureTestingModule({\n      declarations: [ProductComponent],\n      providers: [{\n        provide: ProductService,\n        useValue: productServiceMock\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(ProductComponent);\n    component = fixture.componentInstance;\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should load products, exchange rates, and countries on initialization', () => {\n    // Mock the responses of ProductService methods\n    productServiceMock.getProducts.and.returnValue(of([]));\n    productServiceMock.getExchangeRates.and.returnValue(of([]));\n    productServiceMock.getCountries.and.returnValue(of([]));\n    fixture.detectChanges(); // Trigger ngOnInit\n    expect(productServiceMock.getProducts).toHaveBeenCalled();\n    expect(productServiceMock.getExchangeRates).toHaveBeenCalled();\n    expect(productServiceMock.getCountries).toHaveBeenCalled();\n  });\n  it('should update product price on country selection', () => {\n    const product = {\n      price: 100,\n      currency: 'USD'\n    }; // Replace with your actual product data\n    // Mock the responses of ProductService methods\n    productServiceMock.getProducts.and.returnValue(of([product]));\n    productServiceMock.getExchangeRates.and.returnValue(of([{\n      currencyCode: 'USD',\n      rate: 1\n    }]));\n    productServiceMock.getCountries.and.returnValue(of([{\n      countryCode: 'USA',\n      currencyCode: 'USD'\n    }]));\n    fixture.detectChanges(); // Trigger ngOnInit\n    // Select a country\n    component.onCountrySelection(product, 'USA');\n    // Verify that the product price is updated\n    expect(product.price).toBe(100); // Assuming the exchange rate is mocked to 1 (USD to USD)\n  });\n  // Add more tests based on your component functionality\n});","map":{"version":3,"mappings":"AAAA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,EAAE,QAAQ,MAAM;AAEzBC,QAAQ,CAAC,kBAAkB,EAAE,MAAK;EAChC,IAAIC,SAA2B;EAC/B,IAAIC,OAA2C;EAC/C,IAAIC,kBAAkD;EAEtDC,UAAU,CAAC,MAAK;IACd;IACAD,kBAAkB,GAAGE,OAAO,CAACC,YAAY,CAAC,gBAAgB,EAAE,CAAC,aAAa,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC;IAEhHV,OAAO,CAACW,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACX,gBAAgB,CAAC;MAChCY,SAAS,EAAE,CAAC;QAAEC,OAAO,EAAEZ,cAAc;QAAEa,QAAQ,EAAER;MAAkB,CAAE;KACtE,CAAC,CAACS,iBAAiB,EAAE;IAEtBV,OAAO,GAAGN,OAAO,CAACiB,eAAe,CAAChB,gBAAgB,CAAC;IACnDI,SAAS,GAAGC,OAAO,CAACY,iBAAiB;EACvC,CAAC,CAAC;EAEFC,EAAE,CAAC,eAAe,EAAE,MAAK;IACvBC,MAAM,CAACf,SAAS,CAAC,CAACgB,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,uEAAuE,EAAE,MAAK;IAC/E;IACAZ,kBAAkB,CAACe,WAAW,CAACC,GAAG,CAACC,WAAW,CAACrB,EAAE,CAAC,EAAE,CAAC,CAAC;IACtDI,kBAAkB,CAACkB,gBAAgB,CAACF,GAAG,CAACC,WAAW,CAACrB,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3DI,kBAAkB,CAACmB,YAAY,CAACH,GAAG,CAACC,WAAW,CAACrB,EAAE,CAAC,EAAE,CAAC,CAAC;IAEvDG,OAAO,CAACqB,aAAa,EAAE,CAAC,CAAC;IAEzBP,MAAM,CAACb,kBAAkB,CAACe,WAAW,CAAC,CAACM,gBAAgB,EAAE;IACzDR,MAAM,CAACb,kBAAkB,CAACkB,gBAAgB,CAAC,CAACG,gBAAgB,EAAE;IAC9DR,MAAM,CAACb,kBAAkB,CAACmB,YAAY,CAAC,CAACE,gBAAgB,EAAE;EAC5D,CAAC,CAAC;EAEFT,EAAE,CAAC,kDAAkD,EAAE,MAAK;IAC1D,MAAMU,OAAO,GAAG;MAAEC,KAAK,EAAE,GAAG;MAAEC,QAAQ,EAAE;IAAK,CAAE,CAAC,CAAC;IAEjD;IACAxB,kBAAkB,CAACe,WAAW,CAACC,GAAG,CAACC,WAAW,CAACrB,EAAE,CAAC,CAAC0B,OAAO,CAAC,CAAC,CAAC;IAC7DtB,kBAAkB,CAACkB,gBAAgB,CAACF,GAAG,CAACC,WAAW,CAACrB,EAAE,CAAC,CAAC;MAAE6B,YAAY,EAAE,KAAK;MAAEC,IAAI,EAAE;IAAC,CAAE,CAAC,CAAC,CAAC;IAC3F1B,kBAAkB,CAACmB,YAAY,CAACH,GAAG,CAACC,WAAW,CAACrB,EAAE,CAAC,CAAC;MAAE+B,WAAW,EAAE,KAAK;MAAEF,YAAY,EAAE;IAAK,CAAE,CAAC,CAAC,CAAC;IAElG1B,OAAO,CAACqB,aAAa,EAAE,CAAC,CAAC;IAEzB;IACAtB,SAAS,CAAC8B,kBAAkB,CAACN,OAAO,EAAE,KAAK,CAAC;IAE5C;IACAT,MAAM,CAACS,OAAO,CAACC,KAAK,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EACnC,CAAC,CAAC;EAEF;AAEF,CAAC,CAAC","names":["TestBed","ProductComponent","ProductService","of","describe","component","fixture","productServiceMock","beforeEach","jasmine","createSpyObj","configureTestingModule","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","it","expect","toBeTruthy","getProducts","and","returnValue","getExchangeRates","getCountries","detectChanges","toHaveBeenCalled","product","price","currency","currencyCode","rate","countryCode","onCountrySelection","toBe"],"sourceRoot":"","sources":["C:\\ASHISH\\AngularTJX\\AngularPOC\\ClientApp\\src\\app\\product\\product.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ProductComponent } from './product.component';\nimport { ProductService } from './product.service';\nimport { of } from 'rxjs';\n\ndescribe('ProductComponent', () => {\n  let component: ProductComponent;\n  let fixture: ComponentFixture<ProductComponent>;\n  let productServiceMock: jasmine.SpyObj<ProductService>;\n\n  beforeEach(() => {\n    // Create a spy object for ProductService\n    productServiceMock = jasmine.createSpyObj('ProductService', ['getProducts', 'getExchangeRates', 'getCountries']);\n\n    TestBed.configureTestingModule({\n      declarations: [ProductComponent],\n      providers: [{ provide: ProductService, useValue: productServiceMock }],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(ProductComponent);\n    component = fixture.componentInstance;\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should load products, exchange rates, and countries on initialization', () => {\n    // Mock the responses of ProductService methods\n    productServiceMock.getProducts.and.returnValue(of([]));\n    productServiceMock.getExchangeRates.and.returnValue(of([]));\n    productServiceMock.getCountries.and.returnValue(of([]));\n\n    fixture.detectChanges(); // Trigger ngOnInit\n\n    expect(productServiceMock.getProducts).toHaveBeenCalled();\n    expect(productServiceMock.getExchangeRates).toHaveBeenCalled();\n    expect(productServiceMock.getCountries).toHaveBeenCalled();\n  });\n\n  it('should update product price on country selection', () => {\n    const product = { price: 100, currency: 'USD' }; // Replace with your actual product data\n\n    // Mock the responses of ProductService methods\n    productServiceMock.getProducts.and.returnValue(of([product]));\n    productServiceMock.getExchangeRates.and.returnValue(of([{ currencyCode: 'USD', rate: 1 }]));\n    productServiceMock.getCountries.and.returnValue(of([{ countryCode: 'USA', currencyCode: 'USD' }]));\n\n    fixture.detectChanges(); // Trigger ngOnInit\n\n    // Select a country\n    component.onCountrySelection(product, 'USA');\n\n    // Verify that the product price is updated\n    expect(product.price).toBe(100); // Assuming the exchange rate is mocked to 1 (USD to USD)\n  });\n\n  // Add more tests based on your component functionality\n\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}