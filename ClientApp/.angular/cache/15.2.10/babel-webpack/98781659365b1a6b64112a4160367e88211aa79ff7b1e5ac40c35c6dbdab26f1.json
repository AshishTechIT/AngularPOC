{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./product.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./product.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { ProductService } from './product.service';\nlet ProductComponent = class ProductComponent {\n  constructor(productService) {\n    this.productService = productService;\n    this.products = [];\n    this.exchangeRates = [];\n    this.countries = [];\n    this.selectedCountry = 'USA'; // Default value\n    this.selectedCountrySymbol = 'GBP'; // Default currency symbol\n  }\n\n  ngOnInit() {\n    this.loadProducts();\n    this.loadExchangeRates();\n    this.loadCountries();\n  }\n  loadProducts() {\n    this.productService.getProducts().subscribe(products => this.products = products);\n  }\n  loadExchangeRates() {\n    this.productService.getExchangeRates().subscribe(exchangeRates => this.exchangeRates = exchangeRates);\n  }\n  loadCountries() {\n    this.productService.getCountries().subscribe(countries => this.countries = countries);\n  }\n  getExchangeRateForCurrency(currency) {\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === currency);\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n  getExchangeRateForProduct(product) {\n    const currentDate = new Date();\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === product.currency && new Date(rate.validFromDate) <= currentDate && (rate.validToDate === null || new Date(rate.validToDate) >= currentDate));\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n  onCountrySelection(product, selectedCountryCode) {\n    const selectedCountry = this.countries.find(country => country.countryCode === selectedCountryCode);\n    if (selectedCountry) {\n      const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === selectedCountry.currencyCode);\n      if (exchangeRate) {\n        this.selectedCountrySymbol = this.getCountrySymbol(selectedCountry.countryCode);\n        const newPrice = product.price / this.getExchangeRateForProduct(product) * exchangeRate.rate;\n        // Update the product's price\n        product.price = newPrice;\n      }\n    }\n  }\n  getCountrySymbol(countryCode) {\n    const selectedCountry = this.countries.find(country => country.countryCode === countryCode);\n    return selectedCountry ? selectedCountry.currencyCode : '';\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: ProductService\n  }];\n};\nProductComponent = __decorate([Component({\n  selector: 'app-product',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})\n//implements OnInit \n], ProductComponent);\nexport { ProductComponent };","map":{"version":3,"mappings":"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","names":["Component","ProductService","ProductComponent","constructor","productService","ngOnInit","loadProducts","loadExchangeRates","loadCountries","getProducts","subscribe","products","getExchangeRates","exchangeRates","getCountries","countries","getExchangeRateForCurrency","currency","exchangeRate","find","rate","currencyCode","getExchangeRateForProduct","product","currentDate","Date","validFromDate","validToDate","onCountrySelection","selectedCountryCode","selectedCountry","country","countryCode","selectedCountrySymbol","getCountrySymbol","newPrice","price","selector","template"],"sourceRoot":"","sources":["C:\\ASHISH\\AngularTJX\\AngularPOC\\ClientApp\\src\\app\\product\\product.component.ts"],"sourcesContent":["\nimport { Component, OnInit, Inject } from '@angular/core';\nimport { ProductService } from './product.service';\nimport { Product } from '../product.model';\nimport { ExchangeRate } from '../exchange.model';\nimport { Country } from '../country.model';\n\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\n//implements OnInit \nexport class ProductComponent implements OnInit{\n  products: Product[] = [];\n  exchangeRates: ExchangeRate[] = [];\n  countries: Country[] = [];\n  \n  selectedCountry: string = 'USA'; // Default value\n  selectedCountrySymbol: string = 'GBP'; // Default currency symbol\n\n\n  constructor(private productService: ProductService) {}\n\n  ngOnInit() {\n    this.loadProducts();\n    this.loadExchangeRates();\n    this.loadCountries();\n  }\n\n  loadProducts() {\n    this.productService.getProducts().subscribe(products => (this.products = products));\n    \n  }\n\n  loadExchangeRates() {\n    this.productService.getExchangeRates().subscribe(exchangeRates => (this.exchangeRates = exchangeRates));\n  }\n\n  loadCountries() {\n    this.productService.getCountries().subscribe(countries => (this.countries = countries));\n  }\n\n\n\n  getExchangeRateForCurrency(currency: string): number {\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === currency);\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n\n \n  getExchangeRateForProduct(product: Product): number {\n    const currentDate = new Date();\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === product.currency &&\n      new Date(rate.validFromDate) <= currentDate &&\n      (rate.validToDate === null || new Date(rate.validToDate) >= currentDate));\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n  onCountrySelection(product: Product, selectedCountryCode: string): void {\n    const selectedCountry = this.countries.find(country => country.countryCode === selectedCountryCode);\n    if (selectedCountry) {\n      const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === selectedCountry.currencyCode);\n      if (exchangeRate) {\n        this.selectedCountrySymbol = this.getCountrySymbol(selectedCountry.countryCode);\n        const newPrice = (product.price / this.getExchangeRateForProduct(product)) * exchangeRate.rate;\n        // Update the product's price\n        product.price = newPrice;\n      }\n    }\n  }\n\n  getCountrySymbol(countryCode: string): string {\n    const selectedCountry = this.countries.find((country) => country.countryCode === countryCode);\n    return selectedCountry ? selectedCountry.currencyCode : '';\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}