{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./product.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ProductComponent_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ProductComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"currency\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const product_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", product_r3.name, \" - \", i0.ɵɵpipeBind2(2, 2, ctx_r1.convertPrice(product_r3.price, ctx_r1.selectedCurrency), ctx_r1.selectedCurrency), \" \");\n  }\n}\nfunction ProductComponent_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const currency_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", currency_r4.code);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(currency_r4.name);\n  }\n}\n//implements OnInit \nexport class ProductComponent {\n  /*  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string, private currencyService: CurrencyService) {\r\n     http.get<Product[]>(baseUrl + 'products').subscribe(result => {\r\n       this.products = result;\r\n     }, error => console.error(error));\r\n   } */\n  constructor(productService) {\n    this.productService = productService;\n    this.products = [];\n    this.selectedCurrency = 'GBP';\n    this.currencies = [{\n      name: 'Great Britain Pound',\n      code: 'GBP'\n    }, {\n      name: 'US Dollar',\n      code: 'USD'\n    }, {\n      name: 'Euro',\n      code: 'EUR'\n    }, {\n      name: 'Japanese Yen',\n      code: 'JPY'\n    }\n    // Add more currencies as needed\n    ];\n  }\n\n  ngOnInit() {\n    this.loadProducts();\n  }\n  loadProducts() {\n    this.productService.getProducts().subscribe(products => this.products = products);\n  }\n  /*   onCurrencyChange(currency: string) {\r\n      this.selectedCurrency = currency;\r\n      this.currencyService.setCurrency(currency);\r\n    }\r\n  \r\n    convertPrice(price: number, targetCurrency: string): number {\r\n      // Implement logic for currency conversion here\r\n      // This is a placeholder and should be replaced with actual conversion logic\r\n      return price;\r\n    } */\n  convertPrice(price, fromCurrency, toCurrency) {\n    return this.productService.convertPrice(price, fromCurrency, toCurrency);\n  }\n  changeProductPrice(product, newPrice) {\n    const convertedPrice = this.convertPrice(newPrice, product.currency, this.selectedCurrency);\n    this.productService.updateProductPrice(product.id, convertedPrice, this.selectedCurrency).subscribe(updatedProduct => {\n      // Update the product list with the updated product\n      const index = this.products.findIndex(p => p.id === updatedProduct.id);\n      if (index !== -1) {\n        this.products[index] = updatedProduct;\n      }\n    });\n  }\n  static #_ = this.ɵfac = function ProductComponent_Factory(t) {\n    return new (t || ProductComponent)(i0.ɵɵdirectiveInject(i1.ProductService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProductComponent,\n    selectors: [[\"app-product\"]],\n    decls: 9,\n    vars: 3,\n    consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"for\", \"currency\"], [\"id\", \"currency\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n    template: function ProductComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", 0);\n        i0.ɵɵtext(1, \"Product List\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, ProductComponent_p_2_Template, 3, 0, \"p\", 1);\n        i0.ɵɵelementStart(3, \"div\");\n        i0.ɵɵtemplate(4, ProductComponent_div_4_Template, 3, 5, \"div\", 2);\n        i0.ɵɵelementStart(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Select Currency:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"select\", 4);\n        i0.ɵɵlistener(\"change\", function ProductComponent_Template_select_change_7_listener($event) {\n          return ctx.onCurrencyChange($event.target.value);\n        });\n        i0.ɵɵtemplate(8, ProductComponent_option_8_Template, 2, 2, \"option\", 5);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.products);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.products);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.currencies);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i2.CurrencyPipe],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;IAIAA,yBAAqB;IAAIA,0BAAU;IAAAA,iBAAK;;;;;IAIpCA,2BAAsC;IACpCA,YAEF;;IAAAA,iBAAM;;;;;IAFJA,eAEF;IAFEA,sKAEF;;;;;IAIEA,iCAAoE;IAAAA,YAAmB;IAAAA,iBAAS;;;;IAApDA,wCAAuB;IAACA,eAAmB;IAAnBA,sCAAmB;;;ACH7F;AACA,OAAM,MAAOC,gBAAgB;EAW5B;;;;;EAMCC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAhBlC,aAAQ,GAAc,EAAE;IAExB,qBAAgB,GAAW,KAAK;IAChC,eAAU,GAAG,CACX;MAAEC,IAAI,EAAE,qBAAqB;MAAEC,IAAI,EAAE;IAAK,CAAE,EAC5C;MAAED,IAAI,EAAE,WAAW;MAAEC,IAAI,EAAE;IAAK,CAAE,EAClC;MAAED,IAAI,EAAE,MAAM;MAAEC,IAAI,EAAE;IAAK,CAAE,EAC7B;MAAED,IAAI,EAAE,cAAc;MAAEC,IAAI,EAAE;IAAK;IACnC;IAAA,CACD;EAOoD;;EAErDC,QAAQ;IACN,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAA,YAAY;IACV,IAAI,CAACJ,cAAc,CAACK,WAAW,EAAE,CAACC,SAAS,CAACC,QAAQ,IAAK,IAAI,CAACA,QAAQ,GAAGA,QAAS,CAAC;EACrF;EAEF;;;;;;;;;;EAWEC,YAAY,CAACC,KAAa,EAAEC,YAAoB,EAAEC,UAAkB;IAClE,OAAO,IAAI,CAACX,cAAc,CAACQ,YAAY,CAACC,KAAK,EAAEC,YAAY,EAAEC,UAAU,CAAC;EAC1E;EAEAC,kBAAkB,CAACC,OAAgB,EAAEC,QAAgB;IACnD,MAAMC,cAAc,GAAG,IAAI,CAACP,YAAY,CAACM,QAAQ,EAAED,OAAO,CAACG,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAAC;IAE3F,IAAI,CAACjB,cAAc,CAACkB,kBAAkB,CAACL,OAAO,CAACM,EAAE,EAAEJ,cAAc,EAAE,IAAI,CAACE,gBAAgB,CAAC,CAACX,SAAS,CAACc,cAAc,IAAG;MACnH;MACA,MAAMC,KAAK,GAAG,IAAI,CAACd,QAAQ,CAACe,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACJ,EAAE,KAAKC,cAAc,CAACD,EAAE,CAAC;MACtE,IAAIE,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,IAAI,CAACd,QAAQ,CAACc,KAAK,CAAC,GAAGD,cAAc;;IAEzC,CAAC,CAAC;EACJ;EAAC;qBApDUtB,gBAAgB;EAAA;EAAA;UAAhBA,gBAAgB;IAAA0B;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDb7B/B,6BAAoB;QAAAA,4BAAY;QAAAA,iBAAK;QAIrCA,6DAA4C;QAE5CA,2BAAK;QAEDA,iEAGM;QAENA,gCAAsB;QAAAA,gCAAgB;QAAAA,iBAAQ;QAC9CA,iCAA6E;QAArEA;UAAA,OAAUgC,yCAA2C;QAAA,EAAC;QAC5DhC,uEAAgG;QAClGA,iBAAS;;;QAZTA,eAAe;QAAfA,oCAAe;QAIUA,eAAW;QAAXA,sCAAW;QAOLA,eAAa;QAAbA,wCAAa","names":["i0","ProductComponent","constructor","productService","name","code","ngOnInit","loadProducts","getProducts","subscribe","products","convertPrice","price","fromCurrency","toCurrency","changeProductPrice","product","newPrice","convertedPrice","currency","selectedCurrency","updateProductPrice","id","updatedProduct","index","findIndex","p","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\ASHISH\\AngularTJX\\AngularPOC\\ClientApp\\src\\app\\product\\product.component.html","C:\\ASHISH\\AngularTJX\\AngularPOC\\ClientApp\\src\\app\\product\\product.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">Product List</h1>\n\n\n\n<p *ngIf=\"!products\"><em>Loading...</em></p>\n\n<div>\n \n    <div *ngFor=\"let product of products\">\n      {{ product.name }} -\n      {{ convertPrice(product.price, selectedCurrency) | currency:selectedCurrency }}\n    </div>\n  \n    <label for=\"currency\">Select Currency:</label>\n    <select (change)=\"onCurrencyChange($any($event.target).value)\" id=\"currency\">\n      <option *ngFor=\"let currency of currencies\" [value]=\"currency.code\">{{ currency.name }}</option>\n    </select>\n  </div>\n  \n","\nimport { Component, OnInit, Inject } from '@angular/core';\nimport { ProductService } from './product.service';\nimport { Product } from './product.model';\nimport { CurrencyService } from '../currency.service';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\n//implements OnInit \nexport class ProductComponent implements OnInit{\n  products: Product[] = [];\n \n  selectedCurrency: string = 'GBP';\n  currencies = [\n    { name: 'Great Britain Pound', code: 'GBP' },\n    { name: 'US Dollar', code: 'USD' },\n    { name: 'Euro', code: 'EUR' },\n    { name: 'Japanese Yen', code: 'JPY' },\n    // Add more currencies as needed\n  ];\n /*  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string, private currencyService: CurrencyService) {\n    http.get<Product[]>(baseUrl + 'products').subscribe(result => {\n      this.products = result;\n    }, error => console.error(error));\n  } */\n\n  constructor(private productService: ProductService) {}\n\n  ngOnInit() {\n    this.loadProducts();\n  }\n\n  loadProducts() {\n    this.productService.getProducts().subscribe(products => (this.products = products));\n  }\n\n/*   onCurrencyChange(currency: string) {\n    this.selectedCurrency = currency;\n    this.currencyService.setCurrency(currency);\n  }\n\n  convertPrice(price: number, targetCurrency: string): number {\n    // Implement logic for currency conversion here\n    // This is a placeholder and should be replaced with actual conversion logic\n    return price;\n  } */\n\n  convertPrice(price: number, fromCurrency: string, toCurrency: string): number {\n    return this.productService.convertPrice(price, fromCurrency, toCurrency);\n  }\n\n  changeProductPrice(product: Product, newPrice: number) {\n    const convertedPrice = this.convertPrice(newPrice, product.currency, this.selectedCurrency);\n\n    this.productService.updateProductPrice(product.id, convertedPrice, this.selectedCurrency).subscribe(updatedProduct => {\n      // Update the product list with the updated product\n      const index = this.products.findIndex(p => p.id === updatedProduct.id);\n      if (index !== -1) {\n        this.products[index] = updatedProduct;\n      }\n    });\n  }\n\n  \n}\ninterface conversionRates {\n  \n  exchangeRate: number;\n \n  currencyCode: string;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}