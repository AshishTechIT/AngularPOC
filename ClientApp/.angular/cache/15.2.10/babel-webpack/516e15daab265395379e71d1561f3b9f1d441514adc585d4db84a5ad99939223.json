{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./product.service\";\nfunction ProductComponent_tr_15_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const country_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"value\", country_r3.countryCode)(\"selected\", country_r3.countryCode === ctx_r2.selectedCountry);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", country_r3.name, \" \");\n  }\n}\nfunction ProductComponent_tr_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"currency\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\")(9, \"select\", 3);\n    i0.ɵɵlistener(\"ngModelChange\", function ProductComponent_tr_15_Template_select_ngModelChange_9_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.selectedCountry = $event);\n    })(\"change\", function ProductComponent_tr_15_Template_select_change_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const product_r1 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onCountrySelection(product_r1, ctx_r6.selectedCountry));\n    });\n    i0.ɵɵtemplate(10, ProductComponent_tr_15_option_10_Template, 2, 3, \"option\", 4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const product_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(product_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(product_r1.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind3(7, 5, product_r1.price, ctx_r0.selectedCountrySymbol, \"symbol\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.selectedCountry);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.countries);\n  }\n}\n//implements OnInit \nexport class ProductComponent {\n  constructor(productService) {\n    this.productService = productService;\n    this.products = [];\n    this.exchangeRates = [];\n    this.countries = [];\n    this.selectedCountry = 'USA'; // Default value\n    this.selectedCountrySymbol = 'GBP'; // Default currency symbol\n  }\n\n  ngOnInit() {\n    this.loadProducts();\n    this.loadExchangeRates();\n    this.loadCountries();\n  }\n  loadProducts() {\n    this.productService.getProducts().subscribe(products => this.products = products);\n  }\n  loadExchangeRates() {\n    this.productService.getExchangeRates().subscribe(exchangeRates => this.exchangeRates = exchangeRates);\n  }\n  loadCountries() {\n    this.productService.getCountries().subscribe(countries => this.countries = countries);\n  }\n  getExchangeRateForCurrency(currency) {\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === currency);\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n  changeCurrency(product) {\n    console.log(product.id);\n    console.log(this.selectedCountry);\n    const exchangeRate = this.getExchangeRateForCurrency('USD');\n    console.log('Final Exchange Rate:', exchangeRate);\n    this.productService.convertPrice(product.id, 'USD', exchangeRate).subscribe(convertedProduct => {\n      // Update the product list with the converted product\n      const index = this.products.findIndex(p => p.id === convertedProduct.id);\n      if (index !== -1) {\n        console.log(convertedProduct.price);\n        console.log(convertedProduct.name);\n        this.products[index] = convertedProduct;\n      }\n    });\n  }\n  getExchangeRateForProduct(product) {\n    const currentDate = new Date();\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === product.currency && new Date(rate.validFromDate) <= currentDate && (rate.validToDate === null || new Date(rate.validToDate) >= currentDate));\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n  onCountrySelection(product, selectedCountryCode) {\n    const selectedCountry = this.countries.find(country => country.countryCode === selectedCountryCode);\n    if (selectedCountry) {\n      const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === selectedCountry.currencyCode);\n      if (exchangeRate) {\n        this.selectedCountrySymbol = this.getCountrySymbol(selectedCountry.countryCode);\n        const newPrice = product.price / this.getExchangeRateForProduct(product) * exchangeRate.rate;\n        // Update the product's price\n        product.price = newPrice;\n      }\n    }\n  }\n  getCountrySymbol(countryCode) {\n    const selectedCountry = this.countries.find(country => country.countryCode === countryCode);\n    return selectedCountry ? selectedCountry.currencyCode : '';\n  }\n  static #_ = this.ɵfac = function ProductComponent_Factory(t) {\n    return new (t || ProductComponent)(i0.ɵɵdirectiveInject(i1.ProductService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProductComponent,\n    selectors: [[\"app-product\"]],\n    decls: 16,\n    vars: 1,\n    consts: [[1, \"product-list-container\"], [1, \"product-table\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"value\", \"selected\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"selected\"]],\n    template: function ProductComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Product Catalog\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"table\", 1)(4, \"thead\")(5, \"tr\")(6, \"th\");\n        i0.ɵɵtext(7, \"Product Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"th\");\n        i0.ɵɵtext(9, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"th\");\n        i0.ɵɵtext(11, \"Price\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"th\");\n        i0.ɵɵtext(13, \"Select Country\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"tbody\");\n        i0.ɵɵtemplate(15, ProductComponent_tr_15_Template, 11, 9, \"tr\", 2);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"ngForOf\", ctx.products);\n      }\n    },\n    styles: [\".product-list-container[_ngcontent-%COMP%] {\\r\\n    margin: 20px;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  .product-table[_ngcontent-%COMP%] {\\r\\n    width: 100%;\\r\\n    border-collapse: collapse;\\r\\n    margin-top: 20px;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  .product-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\r\\n    background-color: #f2f2f2;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  .product-table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%], .product-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\r\\n    border: 1px solid #ddd;\\r\\n    padding: 8px;\\r\\n    text-align: left;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcHJvZHVjdC9wcm9kdWN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLCtDQUErQztBQUMvQztJQUNJLFlBQVk7RUFDZDs7RUFFQSw0QkFBNEI7RUFDNUI7SUFDRSxXQUFXO0lBQ1gseUJBQXlCO0lBQ3pCLGdCQUFnQjtFQUNsQjs7RUFFQSw2QkFBNkI7RUFDN0I7SUFDRSx5QkFBeUI7RUFDM0I7O0VBRUEsc0JBQXNCO0VBQ3RCO0lBQ0Usc0JBQXNCO0lBQ3RCLFlBQVk7SUFDWixnQkFBZ0I7RUFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyogQXBwbHkgc3R5bGVzIHRvIHRoZSBwcm9kdWN0IGxpc3QgY29udGFpbmVyICovXHJcbi5wcm9kdWN0LWxpc3QtY29udGFpbmVyIHtcclxuICAgIG1hcmdpbjogMjBweDtcclxuICB9XHJcbiAgXHJcbiAgLyogU3R5bGUgdGhlIHByb2R1Y3QgdGFibGUgKi9cclxuICAucHJvZHVjdC10YWJsZSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xyXG4gIH1cclxuICBcclxuICAvKiBTdHlsZSB0YWJsZSBoZWFkZXIgY2VsbHMgKi9cclxuICAucHJvZHVjdC10YWJsZSB0aCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyO1xyXG4gIH1cclxuICBcclxuICAvKiBTdHlsZSB0YWJsZSBjZWxscyAqL1xyXG4gIC5wcm9kdWN0LXRhYmxlIHRkLCAucHJvZHVjdC10YWJsZSB0aCB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgcGFkZGluZzogOHB4O1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","ProductComponent","constructor","productService","ngOnInit","loadProducts","loadExchangeRates","loadCountries","getProducts","subscribe","products","getExchangeRates","exchangeRates","getCountries","countries","getExchangeRateForCurrency","currency","exchangeRate","find","rate","currencyCode","changeCurrency","product","console","log","id","selectedCountry","convertPrice","convertedProduct","index","findIndex","p","price","name","getExchangeRateForProduct","currentDate","Date","validFromDate","validToDate","onCountrySelection","selectedCountryCode","country","countryCode","selectedCountrySymbol","getCountrySymbol","newPrice","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\ASHISH\\AngularTJX\\AngularPOC\\ClientApp\\src\\app\\product\\product.component.html","C:\\ASHISH\\AngularTJX\\AngularPOC\\ClientApp\\src\\app\\product\\product.component.ts"],"sourcesContent":["<div class=\"product-list-container\">\n  <h2>Product Catalog</h2>\n\n  <table class=\"product-table\">\n    <thead>\n      <tr>\n        <th>Product Name</th>\n        <th>Description</th>\n        <th>Price</th>\n        <th>Select Country</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let product of products\">\n        <td>{{ product.name }}</td>\n        <td>{{ product.description }}</td>\n        <td>{{ product.price | currency:selectedCountrySymbol:'symbol' }}</td>\n        <td>\n          <select [(ngModel)]=\"selectedCountry\" (change)=\"onCountrySelection(product, selectedCountry)\">\n            <option *ngFor=\"let country of countries\" [value]=\"country.countryCode\" [selected]=\"country.countryCode === selectedCountry\">\n              {{ country.name }}\n            </option>\n          </select>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n","\nimport { Component, OnInit, Inject } from '@angular/core';\nimport { ProductService } from './product.service';\nimport { Product } from '../product.model';\nimport { CurrencyService } from '../currency.service';\nimport { HttpClient } from '@angular/common/http';\nimport { ExchangeRate } from '../exchange.model';\nimport { Country } from '../country.model';\n\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.css']\n})\n//implements OnInit \nexport class ProductComponent implements OnInit{\n  products: Product[] = [];\n  exchangeRates: ExchangeRate[] = [];\n  countries: Country[] = [];\n  \n  selectedCountry: string = 'USA'; // Default value\n  selectedCountrySymbol: string = 'GBP'; // Default currency symbol\n\n\n  constructor(private productService: ProductService) {}\n\n  ngOnInit() {\n    this.loadProducts();\n    this.loadExchangeRates();\n    this.loadCountries();\n  }\n\n  loadProducts() {\n    this.productService.getProducts().subscribe(products => (this.products = products));\n    \n  }\n\n  loadExchangeRates() {\n    this.productService.getExchangeRates().subscribe(exchangeRates => (this.exchangeRates = exchangeRates));\n  }\n\n  loadCountries() {\n    this.productService.getCountries().subscribe(countries => (this.countries = countries));\n  }\n\n\n\n  getExchangeRateForCurrency(currency: string): number {\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === currency);\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n\n  changeCurrency(product: Product) {\n    console.log(product.id);\n\n    console.log(this.selectedCountry);\n   \n\n   \n    const exchangeRate = this.getExchangeRateForCurrency('USD') ;\n    console.log('Final Exchange Rate:', exchangeRate);\n    \n\n    this.productService.convertPrice(product.id, 'USD', exchangeRate).subscribe(convertedProduct => {\n      // Update the product list with the converted product\n      const index = this.products.findIndex(p => p.id === convertedProduct.id);\n      if (index !== -1) {\n        console.log(convertedProduct.price);\n        console.log(convertedProduct.name);\n        this.products[index] = convertedProduct;\n      }\n    });\n  }\n  getExchangeRateForProduct(product: Product): number {\n    const currentDate = new Date();\n    const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === product.currency &&\n      new Date(rate.validFromDate) <= currentDate &&\n      (rate.validToDate === null || new Date(rate.validToDate) >= currentDate));\n    return exchangeRate ? exchangeRate.rate : 1;\n  }\n  onCountrySelection(product: Product, selectedCountryCode: string): void {\n    const selectedCountry = this.countries.find(country => country.countryCode === selectedCountryCode);\n    if (selectedCountry) {\n      const exchangeRate = this.exchangeRates.find(rate => rate.currencyCode === selectedCountry.currencyCode);\n      if (exchangeRate) {\n        this.selectedCountrySymbol = this.getCountrySymbol(selectedCountry.countryCode);\n        const newPrice = (product.price / this.getExchangeRateForProduct(product)) * exchangeRate.rate;\n        // Update the product's price\n        product.price = newPrice;\n      }\n    }\n  }\n\n  getCountrySymbol(countryCode: string): string {\n    const selectedCountry = this.countries.find((country) => country.countryCode === countryCode);\n    return selectedCountry ? selectedCountry.currencyCode : '';\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}